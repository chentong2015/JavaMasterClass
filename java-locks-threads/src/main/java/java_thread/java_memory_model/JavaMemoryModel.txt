TODO: 线程的创建和切换比较耗费资源，会涉及到从用户态到内核态的切换
内核线程 Kernel-Level Thread
1. 系统内核管理线程，内核保存线程的状态和上下文信息
2. 线程的创建和管理调度由内核完成
3. 支持多线程在多处理器上并行运行，线程阻塞则进程不阻塞

用户线程 User-Level Thread >> 第三方应用APP
1. 用户程序实现，不依赖操作系统核心，由应用来提供创建, 同步, 调度管理来控制用户线程
2. 不需要用户态和核心态的切换，速度快
3. 内核对ULT无感知，线程阻塞则进程阻塞

TODO: Java线程的实现: 基于KLT(Kernel Level Thread)
1. Java线程都是直接"映射"到OS操作系统原生线程，HotSpot不会干涉线程的调度
2. 创建线程方式: JVM通过内核系统开放的API(p_thread)来创建线程
3. 线程调度方式：抢占式(Preemptive BaseThread-Scheduling), 可能会造成线程饥饿
4. 每个线程由OS来分配执行的时间，线程的切换不由线程本身决定，最终的调度由OS决定

