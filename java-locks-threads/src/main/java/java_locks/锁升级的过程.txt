对于有并发问题的代码块，很多时候只有一个线程在执行，没有资源争抢，造成不必要的性能损失

通过给synchronized锁添加不同的状态来实现优化, 自动进行"锁升级"
1. 无锁状态
2. 偏向锁 : 把线程id放到对象的Object Header中暂存，之后线程来判断线程id是否一致
           必须要启用偏向锁，不会主动释放添加的线程id
3. 轻量级锁: 轻量竞争，通过CAS操作来执行
            如果没有启用偏向锁，则直接升级成轻量级锁
4. 重量级锁: CAS锁不成功/自旋线程持续消耗CPU，对应高并发，重度竞争

另外两种锁优化机制
1. 锁消除: 对于一些要求同步的代码块，如果(逃逸分析)被检测到不可能存在共享数据竞争的问题
          没有逃逸到别的线程中，则对锁进行消除
2. 锁粗化: 对应连续的对同一个对象加锁和解锁，为了避免对性能的影响，会将锁同步的范围进行扩展