TODO. 并发问题的本质:
Race Condition: 竞争条件，多线程需要竞争某资源
Critical Section: 被多线程共享的集合属于临界区域，需要保证并发写的安全

1. 不同的线程共享数据(对象), 并发操作问题
2. 多线程在操作共同数据时, 读取判断和操作上面, 由于线程调度造成数据一致性问题或者损坏
3. 线程在执行非原子操作, 在执行的过程中中断造成问题
4. 在多核CPU机器上, 不同线程可能在不同的CPU上运行，其中各自CPU Cache数据可能和主内存中的数据出现一致性问题 !!

Java中线程安全性的级别体现 ?
1. 不可变类型: 不需要同步，String Long BigInteger
2. 无条件线程安全：类型可变，但是内部同步 AtomicLong ConcurrentHashMap
3. 有条件线程安全: 类型可变，需要外部同步
4. 非线程安全: ArrayList HashMap
5. 线程对立: 通过外部同步也无法解决，因为没有同步的修改静态数据

TODO. Java中线程安全的实现方法(三种层次) ?
1. 无同步方案: Pure Code纯代码 "可重入代码"，方法的返回结果可以预测
2. 非阻塞同步：Lock-Free无锁编程, CAS操作 "乐观并发策略"，发生冲突之后，在进行补偿
3. 互斥同步: Critical Section, Mutex, Semaphore "悲观并发策略"，虚拟机会优化掉大部份不必要的加锁