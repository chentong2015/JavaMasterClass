package jvm_basics.chapter02_Momery_Section;

public class JavaMemorySection {

    // <JVM的三大组成部分>
    // 1. Class Loader Subsystem 类装载子系统
    // 2. Runtime Date Area      运行时的数据区域(内存模型)
    // 3. Execution Engine       字节码执行引擎: Jit即时编译器，GC垃圾回收器 !!

    //                        javac Math.java   --->  java Math.class
    //            运行时的数据区域(内存模型)                   |
    //   堆      虚拟机栈/线程栈     本地方法栈       <--- 类装载子系统
    //   方法区            程序计数器               <--- 字节码执行引擎(执行代码)

    // OS单个进程内存分配限制 = 最大堆容量 + 最大方法区容量 + 栈(虚拟机栈, 本地方法栈)
    // 理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用

    // 1. 虚拟机栈/线程栈: FILO
    //    1.1 为每个线程分配独立的线程栈内存空间
    //    1.2 栈帧(Stack Frame)：
    //          线程运行方法时，在线程栈内存中分配一片内存区域，用来存储方法调用时的局部变量
    //          方法结束时，所分配的栈帧内存空间会出栈，满足先进后出的原则
    //          栈帧划分部分:
    //          分析class字节码执行流程(底层细节)
    //          1.3.1 局部变量表：表中第一个位置_0存储的是this(当前方法的对象)
    //                          objRef = new MyClass(); objRef存放对象在堆中的内存地址
    //                          istroe_1 一般是编译期可知的JVM基本数据类型
    //          1.3.2 操作数栈 : 将指定的数据值(操作数)压入到的内存空间位置, 数据运算过程中临时的内存空间
    //                          iconst_1
    //          1.3.3 动态链接 : C++底层源码概念，将符号引用转变成直接引用，然后存储 !!
    //                          Java里将方法名视为符号，对符号进行解析，通过"符号对应的内存地址"在方法区中找到方法的具体代码
    //          1.3.4 方法出口 : 方法执行完要返回的位置，始终位置栈帧的栈底 !!
    //    1.3 线程请求的栈深度过大，超过虚拟机栈允许的深度，则出现StackOverflow
    // 2. 程序计数器:
    //    2.1 线程分配的专有内存空间
    //    2.2 存储当前线程所执行的字节码行号指示器(code index位置)，用于线程切换后恢复 !!
    //    2.3 由字节码执行引擎来控制值的动态变化
    // 3 方法区(元空间):
    //    3.1 线程共享的内存区域, 存放常量，静态变量，类的信息，运行时常量池
    //    3.2 加载到JVM中的方法所存放的区域
    // 4. 本地方法栈:
    //    4.1 为底层使用C或者C++语言实现的方法分配的内存空间  private native void start0();
    // 5. 堆:
    //    5.1 内存中最大的一块，所有线程共享的一块区域，在虚拟机启动时创建
    //    5.2 几乎所有的对象实例都存储在这个内存中，受到GC垃圾回收器的管理
    //    5.3 一般新创建的对象都是存放在Eden区的，当对象撑满Eden内存区的时候触发GC, Minor GC用于回收年轻代
    //                   |<- Survivor区 ->|
    //        Eden  -->     S0   -->  S1   -->  老年代
    //        8/10         1/10     1/10        2/3
    //        |<--------- 年轻代 -------->|
}
