package jvm.chapter05;

/**
 * 关于Java应用性能调优的简单理解: http://www.jiangxinlingdu.com/practice/2019/06/12/optimize.html
 * 1. 典型的性能问题  : 页面响应慢、接口超时，服务器负载高、并发数低，数据库频繁死锁
 * 2. Java性能的瓶颈 : 磁盘、内存、网络 I/O
 * 3. 性能优化分层模型: 应用层、数据库层、框架层、JVM层
 */
public class DebugOptimization {

    // 性能调优的层次模型
    /**
     * 1. 应用层: 理解代码逻辑，定位有问题代码行: 使用线程安全的数据结构，避免出现死循环
     * 2. 数据库层: SQL、定位Transactions死锁等 : 都数据库的操作频率过高造成死锁
     * 3. 框架层: 看框架源码，理解框架机制
     * 4. JVM层: 虚拟机工作原理，类型加载机制，GC垃圾回收算法等
     */

    // 性能诊断工具: 详见虚拟机性能监控，故障处理工具
    /**
     * 1. CPU诊断: 主要关注平均负载Load Average, CPU使用率, 上下文切换次数Context Switch
     * > top 命令可以查看系统平均负载和CPU使用率
     * > Java 线程上下文切换主要来自共享资源的竞争
     */

    /**
     * 2. Memory: 内存关注应用进程是否足够
     * > free –m 命令查看内存的使用情况
     */

    /**
     * 3. I/O: 磁盘I/O和网络I/O
     * > iostat可以查看磁盘的读写情况
     */

    // 性能调优的解决方面
    /**
     * 1. 基础性能  : 硬件层级或者操作系统层级的升级优化
     * 2. 数据库性能: 事务拆分，索引调优，SQL 优化，NoSQL 引入
     * 3. 应用架构  : 引入分布式策略，计算和存储进行水平化，包括提前计算预处理
     * 4. 业务层面  : 业务上进行规避或者调整
     */
}
