TODO: 并发编程不一定有竞争(资源竞争)，可能有大量的线程是按照先后顺序执行 !!
单线程的问题直接线性化解决, 一旦涉及到多线程必须考虑线程资源共享的问题
由于线程调度会造成共享数据变动以及损坏, 可能需要对共享数据添加同步

并发编程是一种解耦策略，把做什么和什么时候做分开，使得程序像是多台电脑协同工作
1. 多个线程和处理器之间能够分享大量的等待时间
2. 并发会在性能和额外代码上面增加开销
3. 并发需要对设计策略做很大修改

并发编程设计原则
1. SRP单一职责原则：分离并发代码(有自己独立的开发，修改和声明周期)和其他代码，线程尽可能的独立
2. 限制数据作用域，synchronized限制共享数据，保存同步的区域微小
3. 使用数据副本，收集多线程的结果
4. 避免使用一个共享对象的多个方法

并发编程场景
1. 生成者-消费者：生产者创建工作在缓存或者队列中，消费者从队列中获取并完成
2. 作者-读者：平衡读者线程和作者线程，避免线程饥饿 / 作者更新的时候，需要协调读者线程，不去读正在更新的信息
3. 宴席哲学家：进程(哲学家)争强资源(刀叉)的问题 / 引入服务生的判断来避免死锁