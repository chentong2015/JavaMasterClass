进程 Process: 应用启动后的会开启一个唯一的进程，并被分配进程ID
线程 Thread: 调度CPU的最小单位, 也叫轻量级进程LWP(Light Weight Process)
迁程 Fiber: Java里面处理器资源调度的基本单位

Java两种线程区别:
1. User Thread - Thread.setDaemon(false); 普通的用户线程
   只要有一个用户线程在，JVM就不会退出
2. Daemon Thread Thread.serDaemon(ture); 守护线程(后台线程)
   运行在后台的特殊线程，执行某种任务或者等待处理某些事件
   只要有一个用户线程在，后台线程就不会退出
   守护线程不会阻止JVM的推出(not prevent the JVM from exiting when the program finishes)

TODO: 线程是比较"昂贵"的资源 - 详见Java内存模型
1. 线程的创建和销毁成本很高，在Linux这样的操作系统中，创建和销毁都是重量级的系统函数
2. 线程本身占用较大内存，像Java的线程栈，一般至少分配512K～1M的空间，系统中线程数过多将耗尽JVM内存
3. 线程的切换成本很高
   操作系统发生线程切换的时候，需要保留线程的上下文，然后执行系统调用
   如果线程数过高，可能执行线程切换的时间甚至会大于线程执行的时间，导致系统不可用
4. 容易造成锯齿状的系统负载
   系统负载是用活动线程数或CPU核心数，一旦线程数量高但外部网络环境不是很稳定
   就很容易造成大量请求的结果同时返回，激活大量阻塞线程从而使系统负载压力过大

TODO. 造成多线程问题的来源
1. 不同的线程共享数据(对象), 并发操作问题
2. 多线程在操作共同数据时, 读取判断和操作上面, 由于线程调度造成数据一致性问题或者损坏
3. 线程在执行非原子操作, 在执行的过程中中断造成问题
4. 在多核CPU机器上, 不同线程可能在不同的CPU上运行，其中各自CPU Cache数据可能和主内存中的数据出现一致性问题 !!

1. 绝大部分的并发控制都能够使用synchronized来实现，符合3种特性
2. TODO: synchronized是Java语言一个重量级的操作，对应到操作系统内核线程之上，造成用户态和核心态的转换 !!