Java中线程安全性的级别体现 ?
1. 不可变类型: 不需要同步，String Long BigInteger
2. 无条件线程安全：类型可变，但是内部同步 AtomicLong ConcurrentHashMap
3. 有条件线程安全: 类型可变，需要外部同步
4. 非线程安全: ArrayList HashMap
5. 线程对立: 通过外部同步也无法解决，因为没有同步的修改静态数据

TODO. Java中线程安全的实现方法(三种层次) ?
1. 无同步方案: Pure Code纯代码                    "可重入代码"，方法的返回结果可以预测
2. 非阻塞同步：Lock-Free无锁编程, CAS操作           "乐观并发策略"，发生冲突之后，在进行补偿
3. 互斥同步 : Critical Section, Mutex, Semaphore "悲观并发策略"，虚拟机会优化掉大部份不必要的加锁

通过测试验证多线程代码的安全性, 给出可靠证明 ?
1. 蒙特卡洛测试：灵活多变，利于调整，同时多次运行测试(连续集成)，如果测试有错则代码有错
2. 在每种目标部署平台都运行测试
3. 模拟生产环境的负载，在大量执行次数中发现错误