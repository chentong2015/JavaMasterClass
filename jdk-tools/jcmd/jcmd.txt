TODO. jcmd完整版参考文档 = jmap + jinfo + jstack
https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr006.html

> java -XX:NativeMemoryTracking=summary -jar app.jar
> jcmd pid VM.native_memory  在开启NMT参数后，查看Native内存的信息

> jcmd pid GC.class_stats    输出加载的类在内存中的占用信息
       print the detailed information about memory usage of each loaded class.

> jcmd pid GC.heap_dump <file-path>
> jcmd pid GC.heap_dump filename=Myheapdump  堆快照hprof dump

> jcmd <pid/main_class> Thread.print 打印指定进程中所有线程, 分析主线程和Thread线程CPU的占用时间

  Full thread dump OpenJDK 64-Bit Server VM (17.0.2+8-86 mixed mode, sharing):
  Threads class SMR info:
  _java_thread_list=0x00000207e0330220, length=13, elements={ 0x00000207b2598220, 0x000001ad422dd890, *** }

  "main" #1 prio=5 os_prio=0 cpu=62.50ms elapsed=42.00s tid=0x00000207b2598220 nid=0x5b48 waiting on condition  [0x0000009ea1aff000]
     java.lang.Thread.State: TIMED_WAITING (sleeping)
          at java.lang.Thread.sleep(java.base@17.0.2/Native Method)
          at JavaRuntimeAPI.pid.JavaProcessId.main(JavaApplicationProcessId.java:11)
  "Thread-0" #24 prio=5 os_prio=0 cpu=0.00ms elapsed=13.70s tid=0x000001ad422dd890 nid=0x341c waiting on condition  [0x0000000b067ff000]
     java.lang.Thread.State: TIMED_WAITING (sleeping)
          at java.lang.Thread.sleep(java.base@17.0.2/Native Method)
          at JavaRuntimeAPI.pid.JavaProcessId.lambda$main$0(JavaApplicationProcessId.java:13)
          at JavaRuntimeAPI.pid.JavaProcessId$$Lambda$18/0x0000000800c01200.run(Unknown Source)
          at java.lang.Thread.run(java.base@17.0.2/Thread.java:833)

jcmd生成JFR事件分析文件
> jcmd <pid> JFR.start name=custProfile settings=default
> jcmd <pid> JFR.dump filename=custProfile.jfr
> jcmd <pid> JFR.stop