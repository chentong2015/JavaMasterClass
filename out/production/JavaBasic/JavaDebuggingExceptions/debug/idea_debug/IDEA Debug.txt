https://www.jetbrains.com/help/idea/debugging-code.html

Run > View breakpoints: 查看所有标注的断点位置

Breakpoint: 结束在单断点行的前一行，断点行尚未执行
Watches points 代码右侧的实时变量, add / remove
Field Watchpoints 每当field值变化的时中断
(field access, field modification, remove once 只在第一次中断, Resume之后不再中断)

TODO: Frames / Threads : Stack trace 运行时的堆栈调用   ===> 栈帧 JVM虚拟机 2.6节
Variables: 运行时的实时变量 ===> Set value 可以设置变量的测试值
Rerun main: 重启测试
Show current execution point: 跳转到当前测试的断点

Step Over: 执行下一行，如果是方法调用，则不进入方法，直接退出
Step Into(F7): 执行下一行，如果是方法调用，则进入  ====> JDK中的源码方法，默认不是bug的来源，所有debug时不进入 !! JDK并非没有错误
Force Step into: 执行下一行，如果是方法调用，强制进入
Run > Smart Step into: 指定要跳入的方法, 当同时调用多个方法的时候
Step Out: 跳出当前方法的调用
Drop Frame: Time travel into the past 倒带本地变量的值, 重置
Run to cursor: 在鼠标指定的位置(行数)中断，进行测试
Resume Program: 继续执行到最后, 或被后续的断点终止