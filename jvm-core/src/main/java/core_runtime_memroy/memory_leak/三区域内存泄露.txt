TODO. 发生OOM的三个JVM运行时内存区域
Java自带有垃圾回收机制，一般不会存在内存泄露问题
当内存对应的JVM参数值设置过小时，会因为无法满足程序的运行而出现OOM

1. Thread Stack Overflow 线程栈溢出 > java.lang.StackOverflowError
   产生条件: 每次调用方法时都会在栈中存储相应的数据，当无限递归调用时会造成StackOverflow
   测试案例: 模拟栈溢出，查看栈的调用深度，计算栈帧的大小
   private void test(int value) {
       int result = value + 10;
       test(result);
   }

2. MetaSpace 元空间溢出 > java.lang.OutOfMemoryError: Metaspace
   产生条件: 元空间中主要存储类的信息，当程序运行时加载过多的类时会造成OOM
   测试案例: 当通过反射加载类型时，可能会造成过多的代理类(例如ProxyEntity)被加载到元空间中

3. Heap 堆空间OOM溢出 > java.lang.OutOfMemoryError Java heap space
   产生条件: 创建的对象通常存储在堆空间，当持续创建过多或无法被GC回收的对象时，会造成堆空间被填满
   解决方法:
   - Dump heap memory 直接分析内存堆中的数据
   - Java Monitoring Tool 监测如何造成OOM的过程
   - Set Maximum heap size by JVM parameter -Xmx8g