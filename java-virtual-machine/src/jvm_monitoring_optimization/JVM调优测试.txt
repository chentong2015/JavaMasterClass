1. 开启指针压缩: JDK6之后默认开启 -XX:+/-UsrCompressedOops
   oop: ordinary object pointer 对象指针
   1.1 目的是节省空间，提升jvm运行效率
   1.2 开启指针压缩之后，"指针"(包括对象头中的内存指针)的内存地址从8字节压缩成4个字节
   1.3 实现原理:
       test1=16Byte  起始存储地址: 0x00000
       test2=32Byte  起始存储地址: 0x01000
       test3=24Byte  起始存储地址: 0x03000
       把"8字节对齐"出来末尾000进行压缩，使用时再补齐0x000

2. 如何有效计算对象大小?
   空对象: 没有普通属性的类生成的对象
      开启指针压缩: 占16字节=8字节(Mark Word 64位机)+4字节(内存指针)+0+0+4字节(对齐填充)
      未开启指针压缩: 占16字节=8字节(Mark Word 64位机)+8字节(内存指针)+0+0+0字节
   非空对象:
      开启指针压缩: 占24字节=8+4+8(2个int类型的属性)+4
      未开启指针压缩: 占24字节=8+8+8(2个int类型的属性+0
   数组对象: jol-core
      int[] arr = {1,2,3}
      sout(ClassLayout.parseInstance(arr).toPrintable());