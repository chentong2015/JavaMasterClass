TODO. 实战场景下如何分析性能问题并找到解决的方案
系统的性能问题受到多个方面的影响，有多种参数共同决定
首先需要重现问题，然后从不同的角度测试

1. 架构层面分析: 项目模块和组件，前后端分离，分布式策略和LB
2. 应用程序层面: 多线程问题(ThreadPool)，代码bug(读写异常)，JVM监控
3. 系统层面: Log日志分析，网络延迟问题
4. 数据库层面: 连接池问题，SQL耗时，事务问题，Server配置

TODO. 单机几十万并发的系统JVM如何优化 ?
背景分析: Rocket MQ, Kafka 中间件系统, 单机最大可处理几十万的消息
1. 一秒钟几百兆的对象被放入Eden，短时间触发Minor GC，同时Survivor区可能放不下，来不及GC直接被放到老年代中
   老年代的空间被迅速的占满，然后触发Full GC，导致卡顿，客户端发送的请求超时，无法处理
2. 在这个期间，可能还有对象没来得及放到磁盘，还在内存中

调优方案:
1. 使用大内存(>64G)，但minor gc仍然需要优化: Eden(30G)内存太大，做GC依然需要化时间，同时还会STW
2. 选择合适的垃圾收集器，设置合适的参数
   一次只回收Eden区的一部分(2G-3G)，收回出来然后立即使用(使用和回收交替)，中间停顿时间短
   单次的Minor GC是减少的，避免客户端的超时重发，但总的回收一遍之后的时间是增加的